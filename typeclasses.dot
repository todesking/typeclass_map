digraph {
	graph[rankdir="RL"]
	node[shape="record"]

	category [label="{ Category }|{ id :: cat a a \l\
	(.) = o \l }"]
	functor [label="{ Functor }|{ fmap(\<$\>) :: (a -\> b) -\> f a -\> f b }"]
	applicative [label="{ Applicative }|{ pure :: a -\> f a \l\
	(\<*\>) = \<.\>\l }"]
	alternative [label="{ Alternative }|{ empty :: f a \l\
	(\<\|\>) :: f a -\> f a -\> f a \l}"]
	monad  [label="{ Monad }|{ (\>\>=) = \>\>- \lreturn :: a -\> m a \l}"]
	monadplus [label="{ MonadPlus }|{ mzero = zero }"]
	monadzip [label="{ MonadZip }|{ mzip :: m a -\> m b -\> m (a, b)\l\
	mzipWith :: (a -\> b -\> c) -\> m a -\> m b -\> m c \l}"]
	arrow [label="{ Arrow }|{ arr :: (b -\> c) -\> a b c \l\
first :: a b c -\> a (b, d) (c, d) \l\
second :: a b c -\> a (d, b) (d, c) \l\
(***) :: a b c -\> a b' c' -\> a (b, b') (c, c')\l\
(&&&) :: a b c -\> a b c' -\> a b (c, c')\l }"]
	monadfix [label="{ MonadFix }|{ mfix :: (a -\> m a) -\> m a \l}"]
	arrowplus [label="{ ArrowPlus }|{ (\<+\>) :: a b c -\> a b c -\> a b c \l }"]
	arrowzero [label="{ ArrowZero }|{ zeroArrow :: a b c }"]
	arrowinit[label="{ ArrowInit }|{ init :: b -\> a b b }"]
	arrowchoice[label="{ ArrowChoice }|{ left :: a b c -\> a (Either b d) (Either c d) \l\
	right :: a b c -\> a (Either d b) (Either d c)\l\
	(+++) :: a b c -\> a b' c' -\> a (Either b b') (Either c c')\l\
	(\|\|\|) :: a b d -\> a c d -\> a (Either b c) d\l }"]
	arrowapply [label="{ ArrowApply }|{ app :: a (a b c, b) c }"]
	arrowloop [label="{ ArrowLoop }|{ loop :: a (b, d) (c, d) -\> a b c }"]
	cca [label="{Causal Commutative Arrows(CCA) }"]
	monoid [label="{ Monoid m}|{ mempty :: m \l\
	mappend :: m -\> m -\> m \l}"]
	foldable [label="{ Foldable t}|{ foldMap :: Monoid m =\> (a -\> m) -\> t a -\> m \l\
	foldr :: (a -\> b -\> b) -\> b -\> t a -\> b \l}"]
	traversable [label="{ Traversable }|{ traverse :: Applicative f =\> (a -\> f b) -\> t a -\> f (t b) \l\
	sequenceA :: Applicative f =\> t (f a) -\> f (t a) \l }"]
	contravariant [label="{ Contravariant }|{ contramap :: (a -\> b) -\>  b -\> f a }"]
	monadstate [label="{ MonadState s m \n m -\> s }|{ get :: m s \l\
	put :: s -\> m () \l\
	state :: (s -\> (a, s)) -\> m a \l}"]
	monaderror [label="{ MonadError e m \n m -\> e }|{ throwError :: e -\> m a \l\
	catchError :: m a -\> (e -\> m a) -\> m a \l }"]
	comonad [label="{ Comonad w }|{ extract :: w a -\> a \l }"]
	bifunctor [label="{ Bifunctor p }|{ bimap :: (a -\> b) -\> (c -\> d) -\> p a c -\> p b d \l\
	first :: (a -\> b) -\> p a c -\> p b c \l\
	second :: (b -\> c) -\> p a b -\> p  c \l }"]
	biapply [label="{ Biapply p }|{ (\<\<.\>\>) :: p (a -\> b) (c -\> d) -\> p a c -\> p b d \l }"]
	alt [label="{ Alt f }|{ (\<!\>) :: f a -\> f a -\> f a \l\
	some :: Applicative f =\> f a -\> f [a] \l\
	many :: Applicative f =\> f a -\> f [a] \l }"]
	apply [label="{ Apply f }|{ (\<.\>) :: f (a -\> b) -\> f a -\> f b \l}"]
	semigroup [label="{ Semigroup a }|{ \<\> :: a -\> a -\> a }"]
	semigroupoid [label="{ Semigroupoid c }|{ o :: c j k -\> c i j -\> c i k \l }"]
	bind [label="{ Bind }|{ (\>\>-) :: m a -\> (a -\> m b) -\> m b \l\
	join :: m (m a) -\> m a \l}"]
	bindtrans [label="{ BindTrans t}|{ liftB :: Bind b =\> b a -\> t b a }"]
	monadtrans [label="{ MonadTrans t}|{ lift :: Monad m =\> m a -\> t m a \l}"]
	extend [label="{ Extend w }|{ duplicated :: w a -\> w (w a) \l\
	extended :: (w a -\> b) -\> w a -\> w b \l }"]
	plus [label="{ Plus f }|{ zero :: f a \l }"]
	groupoid [label="{ Groupoid }|{ inv :: k a b -\> k b a }"]
	bifoldable [label="{ Bifoldable p}|{ bifold :: Monoid m =\> p m m -\> m \l\
	bifoldMap :: Monoid m =\> (a -\> m) -\> (b -\> m) -\> p a b -\> m \l }"]
	bifoldable1 [label="{ Bifoldable1 }|{ bifold1 :: Semigroup m =\> t m m -\> m \l\
	bifoldMap1 :: Semigroup m =\> (a -\> m) -\> (b -\> m) -\> t a b -\> m \l }"]
	bitraversable [label="{ Bitraversable t }|{ bitraverse :: Applicative f =\> (a -\> f c) -\> (b -\> f d) -\> t a b -\> f (t c d) \l\
	bisequenceA :: Applicative f =\> t (f a) (f b) -\> f (t a b) \l }"]
	bitraversable1 [label="{ Bitraversable1 t }|{ bitraverse1 :: Apply f =\> (a -\> f b) -\> (c -\> f d) -\> t a c -\> f (t b d) \l\
	bisequence1 :: Apply f =\> t (f a) (f b) -\> f (t a b) \l }"]
	foldable1 [label="{ Foldable1 t }|{ fold1 :: Semigroup m =\> t m-\> m \l\
	foldMap1 :: Semigroup m =\> (a -\> m)-\> t a -\> m \l }"]
	traversable1 [label="{ Traversable1 }|{ traverse1 :: Apply f =\> (a -\> f b) -\> t a -\> f (t b) \l\
	sequence1 :: Apply f =\> t (f b) -\> f (t b) \l }"]
	ob [label="{ Ob k }|{ semiid :: k a a \l }"]
	profunctor [label="{ Profunctor p }|{ dimap :: (a -\>b) (c -\> d) -\> p b c -\> p a d \l\
	lmap :: (a -\> b) -\> p b c -\> p a c \l\
	rmap :: (b -\> c) -\> p a b -\> p a c \l }"]
	costrong [label="{ Costrong p \n (Analogue of ArrowLoop where loop = unfirst) }|{ unfirst :: p (a, d) (b, d) -\> p a b \l\
	unsecond :: p (d, a) (d, b) -\> p a b \l }"]
	choice [label="{ Choice p\n(a.k.a ProChoice?) }|{ left' :: p a b -\> p (Either a c) (Either b c) \l\
	right' :: p a b -\> p (Either c a) (Either c b) \l }"]
	profunctoradjunction [label="{ ProfunctorAdjunction f u \n f -\> u, u -\> f }|{ unit :: Profunctor p =\> p :-\> u (f p) \l\
	counit :: Profunctor p =\> f (u p) :-\> p \l }"]
	closed [label="{ Closed p }|{ closed :: p a b -\> p (x -\> a) (x -\> b) }"]
	profunctorfunctor [label="{ ProfunctorFunctor }|{ promap :: Profunctor p =\> (p :-\> q) -\> t :-\> p :-\> t q \l }"]
	profunctormonad [label="{ ProfunctorMonad t }|{ proreturn :: Profunctor =\> p :-\> t p \l\
	projoin :: Profunctor p =\> t (t p) :-\> t p \l }"]
	profunctorcomonad [label="{ ProfunctorComonad t }|{ proextract :: Profunctor p =\> t p :-\> p \l\
	produplicate :: Profunctor p =\> t p :-\> t (t p) \l }"]
	representable [label="{ Representable p }|{ type Rep p :: * -\> * \l\
	tabulate :: (d -\> Rep p c) -\> p d c \l }"]
	corepresentable [label="{ Corepresentable p }|{ type Corep :: * -\> * \l\
	cotabulate :: (Corep p d -\> c) -\> p d c \l }"]
	cosieve [label="{ Cosieve p f \n p -\> f }|{ cosieve :: p a b -\> f a -\> b \l }"]
	sieve [label="{ Sieve p f \n p -\> f }|{ p a b -\> a -\> f b \l }"]
	strong [label="{ Strong p }|{ first' :: p a b -\> p (a, c) (b, c) \l\
	second' :: p a b -\> p (c, a) (c, b) \l }"]
	divisible [label="{ Divisible f }|{ divide :: (a -\> (b, c)) -\> f b -\> f c -\> f a \l\
	conquer :: f a \l }"]
	decidable [label="{ Decidable f }|{ lose :: (a -\> Void) -\> f a \l\
	choose :: (a -\> Either b c) -\> f b -\> f c -\> f a \l }"]
	comonadhoist [label="{ ComonadHoist t }|{ cohoist :: (Comonad w, Comonad v) =\> (forall x. w x -\> v x) -\> t w a -\> t v a \l }"]
	comonadstore [label="{ ComonadStore s w\n w -\> s }|{ pos :: w a -\> s \l\
	peek :: s -\> w a -\> a \l\
	peeks :: (s -\> s) -\> w a -\> a \l\
	seek :: s -\> w a -\> w a \l\
	seeks :: (s -\> s) -\> w a -\> w a \l\
	experiment :: Functor f =\> (s -\> f s) -\> w a -\> f a \l }"]
	comonadtraced [label="{ ComonadTraced m w \n w -\> m }|{ trace :: m -\> w a -\> a }"]
	comonadtrans [label="{ ComonadTrans t }|{ lower :: Comonad w =\> t w a -\> w a }"]
	composition [label="{ Composition o }|{ decompose :: o f g x -\> f (g x) \l\
	compose :: f (g x) -\> o f g x \l }"]


	comonadtrans -> comonad [style="dashed"]
	comonadtraced -> comonad
	comonadstore -> functor [style="dashed"]
	comonadstore -> comonad
	comonadhoist -> comonad [style="dashed"]
	monadplus -> alternative
	monad -> applicative
	divisible -> contravariant
	decidable -> divisible
	strong -> profunctor
	sieve -> {profunctor, functor}
	cosieve -> {profunctor, functor}
	corepresentable -> {costrong, cosieve}
	representable -> {strong, sieve}
	profunctormonad -> profunctorfunctor
	profunctorcomonad -> profunctorfunctor
	profunctorfunctor -> profunctor [style="dashed"]
	closed -> profunctor
	profunctoradjunction -> profunctor
	choice -> profunctor
	costrong -> profunctor
	costrong -> arrowloop [style="dashed" arrowhead="none"]
	ob -> semigroupoid
	traversable1 -> traversable
	traversable1 -> apply [style="dashed"]
	foldable1 -> foldable
	foldable1 -> semigroup [style="dashed"]
	bitraversable1 -> bitraversable
	bitraversable1 -> apply [style="dashed"]
	bitraversable -> applicative [style="dashed"]
	bitraversable -> {bifunctor, bifoldable}
	bitraversable -> traversable [style="dashed" arrowhead="none"]
	bifoldable -> monoid [style="dashed"]
	bifoldable1 -> bifoldable
	bifoldable1 -> semigroup [style="dashed"]
	bifoldable -> foldable [style="dashed" arrowhead="none"]
	groupoid -> semigroupoid
	plus -> alt
	extend -> functor
	comonad -> extend
	comonad -> monad [style="dashed" arrowhead="none"]
	biapply -> bifunctor
	biapply -> apply [style="dashed" arrowhead="none"]
	bifunctor -> functor [style="dashed" arrowhead="none"]
	bindtrans -> monadtrans
	bindtrans -> bind [style="dashed"]
	monadtrans -> monad [style="dashed"]
	alt -> functor
	apply -> functor
	bind -> apply
	alt -> applicative [style="dotted"]
	traversable -> {foldable, functor}
	applicative -> apply
	alternative -> applicative
	monad -> bind
	monadfix -> monad
	monadplus -> {monad, plus}
	monadzip -> monad
	monadstate -> monad
	monaderror -> monad
	arrow -> category
	category -> semigroupoid
	arrowchoice -> arrow
	arrowapply -> arrow
	arrowloop -> arrow
	arrowinit -> arrowloop
	arrowzero -> {arrow, monadplus}
	arrowplus -> arrowzero
	cca -> arrowinit
	traversable -> applicative [style="dashed"]
	foldable -> monoid [style="dashed"]
}
